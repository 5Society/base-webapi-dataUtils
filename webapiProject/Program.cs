using API_JF_Data_Utils_Example.DataAccess;
using JF.Utils.Data;
using JF.Utils.Data.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using System.Reflection;
using webapiProject.Core.Interfaces;
using webapiProject.Core.Services;
using webapiProject.DataAccess.Interfaces;
using webapiProject.DataAccess.Repositories;

var builder = WebApplication.CreateBuilder(args);



builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddSwaggerGen(c =>
{
    //The generated Swagger JSON file will have these properties.
    //Update Api info:
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Your Api Name",
        Version = "v1",
        Description = "Your Api Description.",
        TermsOfService = new Uri("http://www.yourUrl.com/TermsOfService"),
        Contact = new OpenApiContact
        { Name = "Contact Title", Email = "contactemailaddress@domain.com", Url = new Uri("http://www.yourUrl.com") }
    });


    //Locate the XML file being generated by ASP.NET...
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    //... and tell Swagger to use those XML comments.
    c.IncludeXmlComments(xmlPath);
});

//Add dbContext
builder.Services.AddDbContext<JFContext>(options => { options.UseInMemoryDatabase("BaseProject"); });
//builder.Services.AddDbContext<JFContext>(options => {
//    options.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=BaseProject;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False")
//    .LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Command.Name }, Microsoft.Extensions.Logging.LogLevel.Information)
//    .EnableSensitiveDataLogging();
//});

// Add services to the container.
builder.Services.AddScoped<IExampleService, ExampleService>();

// Add non generic repositories
builder.Services.AddScoped<IExampleRepository, ExampleRepository>();
builder.Services.AddScoped<IUnitOfWork, ApplicationContext>();

//Configure automapper dependency injection
builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
